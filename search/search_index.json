{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Hive Documentation Client: QBCore = nil Citizen.CreateThread(function() while QBCore == nil do TriggerEvent('QBCore:GetObject', function(obj) QBCore = obj end) Citizen.Wait(0) end end) Server: QBCore = nil TriggerEvent('QBCore:GetObject', function(obj) QBCore = obj end)","title":"Home"},{"location":"#welcome-to-hive-documentation","text":"Client: QBCore = nil Citizen.CreateThread(function() while QBCore == nil do TriggerEvent('QBCore:GetObject', function(obj) QBCore = obj end) Citizen.Wait(0) end end) Server: QBCore = nil TriggerEvent('QBCore:GetObject', function(obj) QBCore = obj end)","title":"Welcome to Hive Documentation"},{"location":"clEvents/DeleteVehicle/","text":"Player Data TriggerEvent(\"QBCore:Command:TeleportToPlayer\", othersource) Argument Description Required @othersource The ID of the player we're trying to teleport to true Teleports player to a specified to another player.","title":"DeleteVehicle"},{"location":"clEvents/DeleteVehicle/#player-data","text":"TriggerEvent(\"QBCore:Command:TeleportToPlayer\", othersource) Argument Description Required @othersource The ID of the player we're trying to teleport to true Teleports player to a specified to another player.","title":"Player Data"},{"location":"clEvents/OnPlayerLoaded/","text":"Player Data AddEventHandler(\"QBCore:Client:OnPlayerLoaded\") Triggers when the player is loaded","title":"OnPlayerLoaded"},{"location":"clEvents/OnPlayerLoaded/#player-data","text":"AddEventHandler(\"QBCore:Client:OnPlayerLoaded\") Triggers when the player is loaded","title":"Player Data"},{"location":"clEvents/Revive/","text":"Player Data TriggerEvent(\"QBCore:Command:Revive\") Revives the player","title":"Revive"},{"location":"clEvents/Revive/#player-data","text":"TriggerEvent(\"QBCore:Command:Revive\") Revives the player","title":"Player Data"},{"location":"clEvents/TeleportToCoords/","text":"Player Data TriggerEvent(\"QBCore:Command:TeleportToCoords\", x, y, z) Argument Description Required @x X Coordinate true @y Y Coordinate true @z Z Coordinate true Teleports player to a specified to another player.","title":"TeleportToCoords"},{"location":"clEvents/TeleportToCoords/#player-data","text":"TriggerEvent(\"QBCore:Command:TeleportToCoords\", x, y, z) Argument Description Required @x X Coordinate true @y Y Coordinate true @z Z Coordinate true Teleports player to a specified to another player.","title":"Player Data"},{"location":"clEvents/TeleportToPlayer/","text":"Player Data TriggerEvent(\"QBCore:Command:TeleportToPlayer\", othersource) Argument Description Required @othersource The ID of the player we're trying to teleport to true Teleports player to a specified to another player.","title":"TeleportToPlayer"},{"location":"clEvents/TeleportToPlayer/#player-data","text":"TriggerEvent(\"QBCore:Command:TeleportToPlayer\", othersource) Argument Description Required @othersource The ID of the player we're trying to teleport to true Teleports player to a specified to another player.","title":"Player Data"},{"location":"clFunctions/AddMoney/","text":"Player Data QBCore.Functions.SpawnVehicle(model, cb, coords, isnetworked) Argument Description Required Spawns a vehicle","title":"Player Data"},{"location":"clFunctions/AddMoney/#player-data","text":"QBCore.Functions.SpawnVehicle(model, cb, coords, isnetworked) Argument Description Required Spawns a vehicle","title":"Player Data"},{"location":"clFunctions/DeleteVehicle/","text":"QBCore.Functions.DeleteVehicle(vehicle) Argument Description Required @vehicle Vehicle ID to delete true Deletes a vehicle","title":"DeleteVehicle"},{"location":"clFunctions/EnumerateEntities/","text":"QBCore.Functions.EnumerateEntities(initFunc, moveFunc, disposeFunc) Argument Description Required @initFunc -- true @moveFunc -- true @disposeFunc -- true Enumerates through entities - This will probably hardly ever be used","title":"EnumerateEntities"},{"location":"clFunctions/GetClosestPed/","text":"QBCore.Functions.GetClosestPed(coords, ignoreList) Argument Description Required @coords Coordinates of where to check false (Defaults to players coords) @ignoreList Table of Ped Models to ignore false Finds the closest ped to the given coords","title":"GetClosestPed"},{"location":"clFunctions/GetClosestPlayer/","text":"QBCore.Functions.GetClosestPlayer(coords) Argument Description Required @coords Coordinates of where to check false (Defaults to players coords) Finds the closest player to the given coords","title":"GetClosestPlayer"},{"location":"clFunctions/GetClosestVehicle/","text":"QBCore.Functions.GetClosestVehicle(coords) Argument Description Required @coords Coordinates of where to check false (Defaults to players coords) Finds the closest vehicle to the given coords","title":"GetClosestVehicle"},{"location":"clFunctions/GetPeds/","text":"QBCore.Functions.GetPeds(ignoreList) Argument Description Required @ignoreList Table of Ped Models to Ignore true Returns a table of all Peds","title":"GetPeds"},{"location":"clFunctions/GetPlayers/","text":"QBCore.Functions.GetPlayers() Gets all active players that exist","title":"GetPlayers"},{"location":"clFunctions/GetPlayersFromCoords/","text":"QBCore.Functions.GetPlayersFromCoords(coords, distance) Argument Description Required @coords Coordinates to check false (Defaults to players coords) @distance Distance to check false (Defaults to 5.0) Gets all players within the given distance at the given coords","title":"GetPlayersFromCoords"},{"location":"clFunctions/GetVehicleProperties/","text":"QBCore.Functions.GetVehicleProperties(vehicle) Argument Description Required @model Vehicle ID true Spawns a vehicle","title":"GetVehicleProperties"},{"location":"clFunctions/GetVehicles/","text":"QBCore.Functions.GetVehicles() Returns a table of all vehicles","title":"GetVehicles"},{"location":"clFunctions/HasItem/","text":"QBCore.Functions.HasItem(source, cb, item) Argument Description Required @source source true @cb Callback Function false @item Item Name true Returns true or false depending on if the player has an item","title":"HasItem"},{"location":"clFunctions/Notify/","text":"QBCore.Functions.Notify(text, textype, length) Argument Description Required @text Text that displays on the notification true @textype Type of the notification [primary, error or success] false (Defaults to Primary) @length Time till the notification fades out false (Defaults to 5000) Spawns a vehicle","title":"Notify"},{"location":"clFunctions/PlayerData/","text":"QBCore.Functions.GetPlayerData() Loads the players Data Player Data consists of: Data Description PlayerData.money Returns a table of the players money (cash, bank & crypto) PlayerData.job Returns a table of the player job (name, label, payment, onduty) PlayerData.position Returns the players saved position PlayerData.metadata Returns a table of the players Metadata (hunger, thirst, licenses, commandbindings, fingerprint etc.) PlayerData.charinfo Returns a table of the player Character Data (cid, nationality, First & Last name, Phone#, DOB, AccountID & Gender) PlayerData.citizenid Returns the characters Citizen ID PlayerData.steam Returns the players Steam ID PlayerData.license Returns the players R* License PlayerData.name Returns the players name (This just calls GetPlayerName()) PlayerData.cid Returns the players CID (Should use PlayerData.citizenid as this is always 1) Player Functions: Function Description PlayerData.Functions.SetJob(job) Sets the players job PlayerData.Functions.SetJobDuty(onDuty) Sets the player to being on/off duty PlayerData.Functions.AddJobReputation(amount) Adds players job reputation PlayerData.Functions.SetMetaData(meta, val) Sets specified metadata to the given value PlayerData.Functions.AddMoney(moneytype, amount, reason) Adds money to the player PlayerData.Functions.RemoveMoney(moneytype, amount, reason) Removes money from the player PlayerData.Functions.SetMoney(moneytype, amount, reason) Sets players money PlayerData.Functions.AddItem(item, amount, slot, info) Adds Item to players inventory [slot and info are optional] PlayerData.Functions.RemoveItem(item, amount, slot) Removes Item from players inventory [slot is optional] PlayerData.Functions.SetInventory(items) Sets the inventory of a player PlayerData.Functions.ClearInventory() Clears the inventory of a player PlayerData.Functions.GetItemByName(item) Gets the given items data PlayerData.Functions.GetItemBySlot(slot) Gets the item from the given slot PlayerData.Functions.Save() Saves the players data","title":"PlayerData"},{"location":"clFunctions/Progressbar/","text":"QBCore.Functions.Progressbar(name, label, duration, useWhileDead, canCancel, disableControls, animation, prop, propTwo, onFinish, onCancel) | Argument | Description | Type | Required | | ----------- | ----------- | ----------- | | @name | Name (think this is used to keep track of what progressbar it is) | String | true | | @label | The text shown on the progressbar | String | true | | @duration | The time is takes to complete the progress bar | Int | true | | @useWhileDead | Whether or not the progbar can start while the player is dead | Bool | true | | @canCancel | Whether or not the player can cancel the progbar | Bool | true | | @disableControls | The controls that should be disabled when the progbar is active | table | true | | @animation | The animation that plays while the progbar is active | table | true | | @prop | A prop that displays while the progbar is active | table | true | | @propTwo | A 2nd prop that displays while the progbar is active | table | true | | @onFinish | A function that is called when the progbar is completed successfully | function | true | | @onCancel | A function that is called when the progbar is failed/canceled | function | false | Starts a progress bar Example - QBCore.Functions.Progressbar(\"prog_bar\", \"Doing Progress..\", 5000, false, true, {}, {}, {}, {}, function() -- // Done print(\"Progress Bar Finished!\") end, function() -- // Cancel print(\"Progress Bar Canceled\") end) Disable Movements: - disableMouse - disableMovement - disableCarMovement - disableCombat","title":"Progressbar"},{"location":"clFunctions/Progressbar/#example","text":"- QBCore.Functions.Progressbar(\"prog_bar\", \"Doing Progress..\", 5000, false, true, {}, {}, {}, {}, function() -- // Done print(\"Progress Bar Finished!\") end, function() -- // Cancel print(\"Progress Bar Canceled\") end) Disable Movements: - disableMouse - disableMovement - disableCarMovement - disableCombat","title":"Example"},{"location":"clFunctions/SetVehicleProperties/","text":"QBCore.Functions.SetVehicleProperties(vehicle, props) Argument Description Required @vehicle Vehicle ID true @props Vehicles Props true Sets a vehicle properties","title":"SetVehicleProperties"},{"location":"clFunctions/SpawnVehicle/","text":"QBCore.Functions.SpawnVehicle(model, cb, coords, isnetworked) Argument Description Required @model Model Hash or Model Name true @cb Callback Function false @coords Coordinates of where the vehicle spawns false (Defaults to player coords) @isnetworked If the vehicle should be networked false (Defaults to true) Spawns a vehicle","title":"SpawnVehicle"},{"location":"clFunctions/TriggerCallback/","text":"QBCore.Functions.TriggerCallback(name, cd, ...) Argument Description Required @name Callback Name true @cb Callback Function true @... Any additional arguments to send false Triggers a Callback (Used with CreateCallback)","title":"TriggerCallback"},{"location":"svEvents/OnPlayerLoaded/","text":"AddEventHandler(\"QBCore:Server:OnPlayerLoaded\") Triggers when the player is loaded","title":"OnPlayerLoaded"},{"location":"svFunctions/AddPermission/","text":"QBCore.Functions.AddPermission(source, permission) Argument Description Required @source Player Source true @permission Permission Name true Adds given permission to player","title":"AddPermission"},{"location":"svFunctions/CanUseItem/","text":"QBCore.Functions.CanUseItem(item) Argument Description Required @item Item Name true Checks if the given item can be used","title":"CanUseItem"},{"location":"svFunctions/CreateCallback/","text":"QBCore.Functions.CreateCallback(name, cb) Argument Description Required @name Name of the Callback true @cb Callback Function true Creates a Callback, used with TriggerCallback","title":"CreateCallback"},{"location":"svFunctions/CreateUseableItem/","text":"QBCore.Functions.CreateUseableItem(item, cb) Argument Description Required @item Item Name true @cb Callback Function true Creates a event that is called when UseItem is called for the given item.","title":"CreateUseableItem"},{"location":"svFunctions/ExecuteSql/","text":"QBCore.Functions.ExecuteSql(wait, query, cb) Argument Description Required @wait If the thread waits for the query to complete before returning true @query The SQL query to run true @cb Callback Function true Executes and SQL query Example: QBCore.Functions.ExecuteSql(true, \"SELECT * FROM table WHERE column = '\" .. columnSpecific .. \"'\", function(result) print(result) end)","title":"ExecuteSql"},{"location":"svFunctions/GetIdentifier/","text":"QBCore.Functions.GetIdentifier(source, idtype) Argument Description Required @source Player Source true @idtype The type of ID (steam or license) true Gets player identifiers","title":"GetIdentifier"},{"location":"svFunctions/GetPermission/","text":"QBCore.Functions.GetPermission(source) Argument Description Required @source Player Source true Gets the players permission","title":"GetPermission"},{"location":"svFunctions/GetPlayerByCitizenId/","text":"QBCore.Functions.GetPlayerByCitizenId(citizenid) Argument Description Required @citizenid Citizen ID true Gets the player with the given Citizen ID (returns nil if no player is found)","title":"GetPlayerByCitizenId"},{"location":"svFunctions/GetPlayerByPhone/","text":"QBCore.Functions.GetPlayerByPhone(number) Argument Description Required @number Phone Number true Returns the player with the given phone number (returns nil if no player is found)","title":"GetPlayerByPhone"},{"location":"svFunctions/GetPlayers/","text":"QBCore.Functions.GetPlayers() Get all active players","title":"GetPlayers"},{"location":"svFunctions/GetSource/","text":"QBCore.Functions.GetSource(identifier) Argument Description Required @identifier Identifier (steam or license) true Gets the player with the given identifier (return nil if no player found)","title":"GetSource"},{"location":"svFunctions/HasPermission/","text":"QBCore.Functions.HasPermission(source, permission) Argument Description Required @source Player Source true @permission Permission Name true Checks if the player has the given permission","title":"HasPermission"},{"location":"svFunctions/IsOptin/","text":"QBCore.Functions.IsOptin(source) Argument Description Required @source Player Source true Unsure of what this does","title":"IsOptin"},{"location":"svFunctions/IsPlayerBanned/","text":"QBCore.Functions.IsPlayerBanned(source) Argument Description Required @source Player Source true Checks if the player is banned","title":"IsPlayerBanned"},{"location":"svFunctions/IsWhitelisted/","text":"QBCore.Functions.IsWhitelisted(source,) Argument Description Required @source Player Source true Checks if the player is whitelisted","title":"IsWhitelisted"},{"location":"svFunctions/Kick/","text":"QBCore.Functions.Kick(source, reason, setKickReason, deferrals) Argument Description Required @source Player Source true @reason Kick Reason true @setKickReason Unsure? false @deferrals Shows the deferral ui? false Kicks the player from the server","title":"Kick"},{"location":"svFunctions/PlayerData/","text":"QBCore.Functions.GetPlayer(source) Loads the players Data Player Data consists of: Data Description PlayerData.money Returns a table of the players money (cash, bank & crypto) PlayerData.job Returns a table of the player job (name, label, payment, onduty) PlayerData.position Returns the players saved position PlayerData.metadata Returns a table of the players Metadata (hunger, thirst, licenses, commandbindings, fingerprint etc.) PlayerData.charinfo Returns a table of the player Character Data (cid, nationality, First & Last name, Phone#, DOB, AccountID & Gender) PlayerData.citizenid Returns the characters Citizen ID PlayerData.steam Returns the players Steam ID PlayerData.license Returns the players R* License PlayerData.name Returns the players name (This just calls GetPlayerName()) PlayerData.cid Returns the players CID (Should use PlayerData.citizenid as this is always 1) Player Functions: Function Description PlayerData.Functions.SetJob(job) Sets the players job PlayerData.Functions.SetJobDuty(onDuty) Sets the player to being on/off duty PlayerData.Functions.AddJobReputation(amount) Adds players job reputation PlayerData.Functions.SetMetaData(meta, val) Sets specified metadata to the given value PlayerData.Functions.AddMoney(moneytype, amount, reason) Adds money to the player PlayerData.Functions.RemoveMoney(moneytype, amount, reason) Removes money from the player PlayerData.Functions.SetMoney(moneytype, amount, reason) Sets players money PlayerData.Functions.AddItem(item, amount, slot, info) Adds Item to players inventory [slot and info are optional] PlayerData.Functions.RemoveItem(item, amount, slot) Removes Item from players inventory [slot is optional] PlayerData.Functions.SetInventory(items) Sets the inventory of a player PlayerData.Functions.ClearInventory() Clears the inventory of a player PlayerData.Functions.GetItemByName(item) Gets the given items data PlayerData.Functions.GetItemBySlot(slot) Gets the item from the given slot PlayerData.Functions.Save() Saves the players data","title":"PlayerData"},{"location":"svFunctions/RemovePermission/","text":"QBCore.Functions.RemovePermission(source) Argument Description Required @source Player Source true Removes permission from a player","title":"RemovePermission"},{"location":"svFunctions/ToggleOptin/","text":"QBCore.Functions.ToggleOptin(source) Argument Description Required @source Player Source true Unsure what this does","title":"ToggleOptin"},{"location":"svFunctions/TriggerCallback/","text":"QBCore.Functions.TriggerCallback(name, source, cb, ...) Argument Description Required @name Callback Name true @source Player Source true @cb Callback Function true @... Additional Arguments true Triggers a callback used with CreateCallback","title":"TriggerCallback"},{"location":"svFunctions/UseItem/","text":"QBCore.Functions.UseItem(source, item) Argument Description Required @source Player Source true @item Item Name true Runs use logic for given item","title":"UseItem"}]}